/*
MIT License

Copyright (c) 2018 Syoyo Fujita

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#include <cstdint>  // C++11
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <sstream>

#include <XGen/SgCurve.h>
#include <XGen/XgSplineAPI.h>

// Export XgenSpline to Cyhair format.

// Cyhair
#define CYHAIR_INFO_HEADER_SIZE (88)

struct CyhairHeader
{
  char signagure[4]; // "HAIR"
  uint32_t hair_count;
  uint32_t point_count;
  uint32_t flags;

  // default values
  uint32_t d_segments;
  float d_thickness;
  float d_transparency;
  float d_color[3];

  char info[CYHAIR_INFO_HEADER_SIZE]; // infos. pad to 128bytes.
};

//
// Save curves as CyHair format.
//
bool SaveAsCyhair(const std::string &filename,
    std::vector<float> points,
    std::vector<uint32_t> num_points)
{
  CyhairHeader header;

  if (sizeof(header) != 128) {
    std::cerr << "header size mismatch." << std::endl;
    return false;
  }

  header.signagure[0] = 'H';
  header.signagure[1] = 'A';
  header.signagure[2] = 'I';
  header.signagure[3] = 'R';

  // 0x1 = has_segments
  // 0x2 = has_points
  // 0x4 = has_thickness
  // 0x8 = has_transparency
  // 0x10 = has_color
  header.flags = 0x1 | 0x2;

  header.d_segments = 0; // no default segments.
  header.d_thickness = 1.0f; // FIXME(syoyo)
  header.d_transparency = 0.5f; // FIXME(syoyo)
  header.d_color[0] = 1.0f; // FIXME(syoyo)
  header.d_color[1] = 1.0f; // FIXME(syoyo)
  header.d_color[2] = 1.0f; // FIXME(syoyo)

  header.hair_count = num_points.size();
  header.point_count = points.size() / 3; // XYZ

  std::string info("Generated by XGen Spline converter.");
  assert(info.size() < (CYHAIR_INFO_HEADER_SIZE - 1));
  memcpy(header.info, info.data(), info.size());

  std::ofstream ofs(filename.c_str(), std::ios::binary);
  if (!ofs) {
    std::cerr << "Failed to open [" << filename << "] to write." << std::endl;
    return false;
  }

  // strands = points - 1
  std::vector<uint16_t> num_strands;
  for (size_t i = 0; i < num_points.size(); i++) {
    assert(num_points[i] > 0);
    assert(num_points[i] < std::numeric_limits<uint16_t>::max());
    num_strands.push_back(uint16_t(num_points[i] - 1));
  }

  // write header.
  ofs.write(reinterpret_cast<const char*>(&header), sizeof(header));

  // write strands.
  ofs.write(reinterpret_cast<const char*>(num_strands.data()), num_strands.size() * sizeof(uint16_t));

  // write points.
  ofs.write(reinterpret_cast<const char*>(points.data()), points.size() * sizeof(float));

  ofs.close();

  return true;
}

int main(int argc, char** argv) {
  XGenSplineAPI::XgFnSpline splines;

  if (argc < 3) {
    std::cerr << argv[0] << " <input.xgen.bin> <output.cyhair> (num_strands)" << std::endl;
    std::cerr << "Needs input xgen binary filename and output cyhair filename" << std::endl;
    return EXIT_FAILURE;
  }

  int num_strands = -1; // -1 = export all strands. 
  if (argc > 3) {
    num_strands = atoi(argv[3]);
    if ((num_strands == 0) || (num_strands < -1)) {
      std::cerr << "Invalid num_strands value: " << num_strands << std::endl;
    }
  }
  if (num_strands == -1) {
    std::cout << "Export all strands" << std::endl;
  } else {
    std::cout << "Export " << num_strands << " strands" << std::endl;
  }

  std::stringstream ss;
  {
    std::ifstream ifs(argv[1]);
    if (!ifs) {
      std::cerr << "Failed to open " << argv[1] << std::endl;
      return EXIT_FAILURE;
    }

    ss << ifs.rdbuf();
  }

  const float sample_time = 0.0f;
  const size_t sample_size = ss.str().size();

  if (!splines.load(ss, sample_size, sample_time)) {
    std::cerr << "Failed to load XGen spline " << argv[1] << std::endl;
    return EXIT_FAILURE;
  }

  std::vector<uint32_t> curve_counts;
  std::vector<uint32_t> point_counts;
  std::vector<uint32_t> point_interp_counts;

  // Simple 2D Array
  std::vector<std::vector<float> > points_array;

  // TODO(syoyo): Create array for each spline primitive and do not create 1D global array.
  std::vector<float> uvcoords;
  std::vector<float> points;
  std::vector<uint32_t> num_points;

  XGenSplineAPI::XgItSpline it = splines.iterator();
  size_t counts = 0;
  for (; !it.isDone(); it.next()) {

    const uint32_t stride = it.primitiveInfoStride();

    const uint32_t primitiveCount = it.primitiveCount();
    const uint32_t* primitiveInfos = it.primitiveInfos();

    const SgVec3f* positions = it.positions(0);
    const float* width = it.width();
    const SgVec2f* texcoords = it.texcoords();
    const SgVec2f* patchUVs = it.patchUVs();

    for (uint32_t i = 0; i < primitiveCount; i++) {
      if (num_strands > 0) {
        if (counts >= num_strands) {
          break;
        }
      }
      counts++;

      const uint32_t offset = primitiveInfos[i * stride];
      const uint32_t length = primitiveInfos[i * stride + 1];

      num_points.push_back(
          length);  // TODO(syoyo) +2 for phantom points at each end point of a curve.

      uvcoords.push_back(patchUVs[offset][0]);
      uvcoords.push_back(patchUVs[offset][1]);

      // TODO(syoyo): Consider phantom points?
      // points.push_baack(phantompoints);

      for (uint32_t k = 0; k < length; k++) {
        points.push_back(positions[offset + k][0]);
        points.push_back(positions[offset + k][1]);
        points.push_back(positions[offset + k][2]);
        // TODO(Radius, wcoord, directions, orientations)
      }
    }

  }

  std::cout << "sampleCount " << splines.sampleCount() << std::endl;
  std::cout << "num_points " << num_points.size() << std::endl;
  std::cout << "points " << points.size() / 3 << std::endl;

  // Assume static scene.
  assert(splines.sampleCount() == 1);

  std::string output_filename(argv[2]);
  bool ret = SaveAsCyhair(output_filename, points, num_points);
  if (!ret) {
    return EXIT_FAILURE;
  }
  std::cout << "Wrote " << output_filename << std::endl; 

  return EXIT_SUCCESS;
}
